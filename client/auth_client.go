package client

import (
	"context"
	pb "gRPC-Playground/ecommerce"
	"log"
	"time"

	"google.golang.org/grpc"
)

// AuthClient struct to call authentication service.
type AuthClient struct {
	// AuthServiceClient service field generated by protoc.
	service  pb.AuthServiceClient
	username string
	password string
}

// NewAuthClient builds and returns a new AuthClient instance
// It will have 3 input parameters: a grpc client connection, a username and a password.
func NewAuthClient(cc *grpc.ClientConn, username, password string) *AuthClient {
	return &AuthClient{
		service:  pb.NewAuthServiceClient(cc), // cc -> Client Server
		username: username,
		password: password,
	}
}

// Login() function to call Login RPC to get access token.
func (client *AuthClient) Login() (string, error) {
	// create a context with timeout of 5 seconds,
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// *** Implementing our Login unary rpc remote method
	// call Login() our unary RPC remote method with the request and a context
	resp, err := client.service.Login(
		ctx,
		&pb.LoginRequest{
			Username: client.username,
			Password: client.password,
		},
	)

	if err != nil {
		log.Fatalf("Unable to log in user: %v", err)
	}

	// Else, we return the responded access token to the caller. 
	return resp.GetAccessToken(), nil

}
